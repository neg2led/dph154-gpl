/*****************************************************************************
 * BSP Version: 3.2.4, RevisionID: ac30f57, Date: 20100223 17:42:05
 *****************************************************************************/

/*
 * Copyright (c) 2009 picoChip Designs Ltd
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * All enquiries to support@picochip.com
 */

/*!
 * \file picoif_ioctl.h
 * \brief Definition of picoIf ioctl types and associated data.
 *
 * This file defines the ioctl() calls used for picoIf configuration and any
 * associated shared structures that are used to pass data from userspace into
 * kernelspace.
 */

#ifndef __PICOIF_PICOIF_IOCTL_H__
#define __PICOIF_PICOIF_IOCTL_H__

#include <linux/types.h>
#include <linux/ioctl.h>

/*!
 * \brief Structure to pass config read/write requests between userspace and
 * the kernel.
 */
struct picoif_cfg_req
{
    __u16           dev;        /*!< Logical picoArray device number to use. */
    __u16           caeid;      /*!< CAEID to address. */
    __u16           ae_addr;    /*!< The address inside the AE. */
    __u16 __user    *buf;       /*!< The buffer to read/write from/to. */
    unsigned        count;      /*!< The number of 16 bit words to read/write. */
};

/*!
 * \brief Structure to pass a request for a new transport instance from
 * userspace to the kernel.
 */
struct picoif_new_trans_req
{
    const char      description[ 32 ];  /*!< Description of the transport
                                         *   type. */
    void __user     *params;            /*!< Extra parameters for the
                                         *   transport. */
};

/*!
 * \brief Structure to pass register read/write requests between userspace and
 * the kernel.
 */
struct picoif_reg_req
{
    __u16           dev;        /*!< Logical picoArray device number to use. */
    __u16           reg_id;     /*!< The register to read/write. */
    __u32           value;      /*!< The value of the register. */
};

/*!
 * \brief Structure to pass multiple config write requests between
 * userspace and the kernel.
 */
struct picoif_multi_reg_req
{
    __u16           dev;        /*!< Logical picoArray device number to use. */
    __u32 __user    *buf;       /*!< The buffer to write to. */
    __u32           count;      /*!< The number of 32 bit words to write. */
};

/*! The magic number for picoIf ioctl() messages. */
#define PICOIF_IOC_MAGIC       'p'

/* Lint errors 835, 506, 845, 944, 944, and 831 are supressed in these
 * definitions as the warnings are generated by the magic ioctl code and can't
 * be fixed here. */

/*! Config read request. */
#define PICOIF_IOC_CFG_READ    /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                               _IOWR( PICOIF_IOC_MAGIC, 0, \
                                      struct picoif_cfg_req )

/*! Config write request. */
#define PICOIF_IOC_CFG_WRITE   /*lint -e(835, 506, 845, 944, 831 )*/ \
                               _IOWR( PICOIF_IOC_MAGIC, 1, \
                                      struct picoif_cfg_req )

/*! Multi Config write request. */
#define PICOIF_IOC_MULTI_CFG_WRITE   /*lint -e(835, 506, 845, 831, 944)*/ \
                               _IOWR( PICOIF_IOC_MAGIC, 2, \
                                      struct picoif_multi_reg_req )

/*! Register read request. */
#define PICOIF_IOC_REG_READ    /*lint -e(835, 506, 845, 944, 831)*/ \
                               _IOWR( PICOIF_IOC_MAGIC, 3, \
                                      struct picoif_reg_req )

/*! Register write request. */
#define PICOIF_IOC_REG_WRITE   /*lint -e(835, 506, 845, 944, 831, 941)*/ \
                               _IOWR( PICOIF_IOC_MAGIC, 4, \
                                      struct picoif_reg_req )

/*! Request to reset all picoArrays. */
#define PICOIF_IOC_RESET       /*lint -e(835, 506, 845, 944, 831, 941)*/ \
                               _IO( PICOIF_IOC_MAGIC, 5 )

/*! Request to get the number of picoArrays in the system */
#define PICOIF_IOC_NUMDEV      /*lint -e(835, 506, 845, 944, 831, 941)*/ \
                               _IOR( PICOIF_IOC_MAGIC, 6, unsigned )

/*! Convert a file descriptor into a transport instance. */
#define PICOIF_IOC_NEW_TRANS   /*lint -e(835, 506, 845, 944, 831, 941)*/ \
                               _IOWR( PICOIF_IOC_MAGIC, 7, \
                                      struct picoif_new_trans_req )

/*! Request to start all picoArrays. */
#define PICOIF_IOC_STARTALL    /*lint -e(835, 506, 845, 944, 831, 941)*/ \
                               _IO( PICOIF_IOC_MAGIC, 8 )

/*! Request to stop all picoArrays. */
#define PICOIF_IOC_STOPALL    /*lint -e(835, 506, 845, 944, 831, 941)*/ \
                               _IO( PICOIF_IOC_MAGIC, 9 )

/*! The number of picoIf ioctl()s. */
#define PICOIF_IOC_NUM         ( 10 )

/*!
 * \brief Structure to pass parameters for a new GPR interrupt transport
 * instance.
 */
struct picoif_gpr_int_params
{
    unsigned        dev_num;        /*!< The logical device number to use. */
    int             irq_num;        /*!< The GPR IRQ number to use. */
};

/*!
 * \brief Structure to pass parameters for a new DMA DL/UL transport
 * instance.
 */
struct picoif_dma_params
{
    unsigned        dev_num;        /*!< The logical device number to use. */
    int             channel;        /*!< The DMA channel to use. */
    size_t          buf_size;       /*!< The buffer size to use. */
};

/*!
 * \brief Structure to pass parameters for a new HwIF UL transport
 * instance.
 */
struct picoif_hwif_params
{
    unsigned        dev_num;        /*!< The picoArray to use. */
    int             int_clear_gpr;  /*!< The interrupt clear GPR to use. */
    unsigned        int_num;        /*!< Interrupt number to use. */
    int             channel;        /*!< The DMA channel to use. */
    size_t          buf_size;       /*!< The buffer size to use. */
    int             status_gpr;     /*!< The Status GPR */
    int             count_gpr;      /*!< The count GPR */  
};

/*!
 * \brief Structure to pass parameters for a new HwIF 2 UL transport
 * instance.
 */
struct picoif_hwif2_params
{
    unsigned        dev_num;        /*!< Device number to use. */
    unsigned        int_num;        /*!< Interrupt number to use. */
    int             channel;        /*!< The DMA channel to use. */
    size_t          buf_size;       /*!< The buffer size to use. */
    int             its_gpr;        /*!< The ITS GPR */
    int             itm_gpr;        /*!< The ITM GPR */
};

#endif /* !__PICOIF_PICOIF_IOCTL_H__ */
