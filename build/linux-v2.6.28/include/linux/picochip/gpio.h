/*****************************************************************************
 * BSP Version: 3.2.4, RevisionID: ac30f57, Date: 20100223 17:42:05
 *****************************************************************************/

/*
 * Copyright (c) 2009 picoChip Designs Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * All enquiries to support@picochip.com
 */

/*!
 * \file gpio.h
 * \brief Kernel API core functionality for picoIf GPIO.
 *
 * This file defines functions for configuration and control of (SD)GPIO lines.
 *
 */

#ifndef __PICOIF_GPIO_H__
#define __PICOIF_GPIO_H__

/*!
 * Check if a GPIO pin ID is a valid GPIO pin in this system
 *
 * @param gpio The ID of the GPIO pin
 * @return Returns 1 if gpio is a valid pin, 0 otherwise
 */
__must_check int
gpio_is_valid( int gpio );

/*!
 * Request a new GPIO pin. This implements part of the Linux GPIO guidelines.
 *
 * @param gpio The pin ID to request
 * @param label The name of the pin - this only serves as a tag for debugging
 * so can be anything.
 * @return Returns zero on success, non-zero on failure
 * @return Returns zero on success, non-zero on failure.
 */
__must_check int
gpio_request( unsigned gpio,
              const char *label );

/*!
 * Free a GPIO pin previously requested with gpio_request().
 *
 * @param gpio The GPIO ID to free.
 */
void
gpio_free( unsigned gpio );

/*!
 * Set the direction of a GPIO pin requested with gpio_request() to be an
 * input.
 *
 * @param gpio The GPIO ID to configure.
 * @return Returns zero on success, non-zero on failure.
 */
__must_check int
gpio_direction_input( unsigned gpio );

/*!
 * Set the direction of a GPIO pin requested with gpio_request() to be an
 * input.
 *
 * @param gpio The GPIO ID to configure.
 * @param value The initial output value for the gpio pin.
 * @return Returns zero on success, non-zero on failure.
 */
__must_check int
gpio_direction_output( unsigned gpio,
                       int value );

/*!
 * Check if a GPIO pin can sleep. Implemented as part of the Linux GPIO
 * guidelines
 *
 * @return Always returns zero as none of our GPIOs can sleep
 */
__must_check int
gpio_cansleep( unsigned gpio );

/*!
 * Export the GPIO pin implemented as part of the Linux GPIO guidelines.
 *
 * @param gpio The GPIO ID to export.
 * @paran direction_may_change Boolean indicating the direction can change
 * @return -ENODEV as this operation is not supported
 */
__must_check int
gpio_export( unsigned gpio,
             bool direction_may_change );

/*!
 * Un-export the GPIO pin implemented as part of the Linux GPIO guidelines.
 *
 * @param gpio The GPIO ID to un-export.
 * @return -ENODEV as this operation is not supported
 */
__must_check int
gpio_unexport( unsigned gpio );

/*!
 * Return the GPIO value and put the GPIO into sleep mode as specified in the
 * Linux GPIO guidelines
 *
 * @param gpio The GPIO ID to read
 * @return -EIO as none of our GPIOs can be put to sleep.
 */
__must_check int
gpio_get_value_cansleep( unsigned gpio );

/*!
 * Set the GPIO value and put the GPIO into sleep mode as specified in the
 * Linux GPIO guidelines
 *
 * @param gpio The GPIO ID to read
 * @return -EIO as none of our GPIOs can be put to sleep.
 */
__must_check int
gpio_set_value_cansleep( unsigned gpio,
                         int value );

/*!
 * Set the value of the GPIO pin.
 *
 * @param gpio The ID of the pin to set the value of.
 * @param value The value to set the pin to.
 * @return zero on success, negative on failure
 */
__must_check int
gpio_set_value( unsigned gpio,
                int value );

/*!
 * Get the value of the GPIO pin.
 *
 * @param gpio The ID of the pin to get the value of.
 * @param value The value to set the pin to.
 * @return The GPIO value on success, negative on failure
 */
__must_check int
gpio_get_value( unsigned gpio );

/*!
 * Given a GPIO pin ID, find the IRQ number that it can generate.
 *
 * @param gpio The GPIO pin to get the IRQ line for.
 * @return Returns the IRQ number on success, negative on failure.
 */
__must_check int
gpio_to_irq( unsigned gpio );

/*!
 * Given a IRQ line number, find the GPIO pin ID that can generate it.
 *
 * @param irq The IRQ line that can be generated by the GPIO.
 * @return Returns the GPIO pin number on success, negative on failure.
 */
__must_check int
irq_to_gpio( unsigned irq );

#endif /* __PICOIF_GPIO_H__ */
