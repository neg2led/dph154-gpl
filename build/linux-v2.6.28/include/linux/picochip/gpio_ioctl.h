/*
 * BSP Version: 3.2.4, RevisionID: ac30f57, Date: 20100223 17:42:05
 *
 * Copyright (c) 2006-2008 picoChip Designs Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * All enquiries to support@picochip.com
 */

/*!
 * \file gpio_iotctl.h
 * \brief Definition of picogpio ioctl types and associated data.
 *
 * This file defines the ioctl() calls used for picogpio configuration and any
 * associated shared structures that are used to pass data from userspace into
 * kernelspace.
 */

#ifndef __GPIO_IOCTL_H__
#define __GPIO_IOCTL_H__

#ifdef __KERNEL__
#include <linux/ioctl.h>
#include <linux/types.h>
#else /* __KERNEL__ */
#include <sys/ioctl.h>
#include <stdint.h>

typedef uint8_t u8;
typedef uint16_t u16;
#endif /* __KERNEL__ */

/*!
 * \brief Data structure used for passing GPIO commands from userspace to kernel
 * space.
 */
typedef struct
{
    unsigned pin;              /*!< Pin emumeration to use */
    int value;                 /*!< Value to read / write */
} picogpio_op_t;

/*!
 * \brief Data structure used for passing SDGPIO commands from userspace to
 * kernel space.
 */
typedef struct
{
    unsigned pin;              /*!< Pin emumeration to use */ 
    u8 converter_size;         /*!< The converter size in bits */   
    u16 analogue_rate;         /*!< The analogue rate value of the DAC */

} picogpio_analogue_config_t;

/*!
 * \brief Enumeration for specifing pin direction
 */
enum picogpio_pin_direction
{
    PICOGPIO_INPUT,           /*!< Pin is an input */
    PICOGPIO_OUTPUT,          /*!< Pin is an output */
};

/* Lint errors 835, 506, 845, 944, 944, and 831 are supressed in these
 * definitions as the warnings are generated by the magic ioctl code and can't
 * be fixed here. */

/*! The base to register ioctl commands from. */
#define PICOGPIO_IOCTL_BASE   'g'

/*! Offset for iotcl parameters */
#define PICOGPIO_IOCTL_START  ( 0x00 )

/*! Acquire a GPIO pin. */
#define PICOGPIO_ACQUIRE         /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                                 _IOR( PICOGPIO_IOCTL_BASE, \
        PICOGPIO_IOCTL_START + 0, picogpio_op_t )

/*! Release a GPIO pin. */
#define PICOGPIO_RELEASE         /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                                 _IOR( PICOGPIO_IOCTL_BASE, \
        PICOGPIO_IOCTL_START + 1, picogpio_op_t )

/*! Get the GPIO pin direction. */
#define PICOGPIO_GET_DIRECTION   /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                                 _IOWR( PICOGPIO_IOCTL_BASE, \
        PICOGPIO_IOCTL_START + 2, picogpio_op_t )

#define PICOGPIO_SET_DIRECTION   /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                                 _IOR( PICOGPIO_IOCTL_BASE, \
        PICOGPIO_IOCTL_START + 3, picogpio_op_t )

/*! Get the GPIO pin value. */
#define PICOGPIO_GET_VALUE       /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                                 _IOWR( PICOGPIO_IOCTL_BASE, \
        PICOGPIO_IOCTL_START + 4, picogpio_op_t )

/*! Set the GPIO pin value. */
#define PICOGPIO_SET_VALUE       /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                                 _IOR( PICOGPIO_IOCTL_BASE, \
        PICOGPIO_IOCTL_START + 5, picogpio_op_t )

/*! Configure an analogue GPIO pin. */
#define PICOGPIO_ANALOGUE_CONFIG /*lint -e(835, 506, 845, 941, 944, 831)*/ \
                                 _IOR( PICOGPIO_IOCTL_BASE, \
        PICOGPIO_IOCTL_START + 6, picogpio_analogue_config_t )

/*! Number of valid ioctl parameters */
#define PICOGPIO_IOCTL_NUM_IOCTL  ( 7 )

#endif /* !__GPIO_IOCTL_H__ */

